import React, { useState } from 'react';
import { Search, Download, UserCheck, UserX, Users, Clock } from 'lucide-react';

interface AttendanceRecord {
  id: string;
  studentId: string;
  rollNo: string;
  studentName: string;
  examId: string;
  subject: string;
  checkInTime: string;
  checkOutTime: string;
  status: 'present' | 'absent' | 'late';
  seatNo: string;
}

const StudentAttendance: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedExam, setSelectedExam] = useState('EX001');
  const [attendanceFilter, setAttendanceFilter] = useState('all');
  const [attendanceData, setAttendanceData] = useState<AttendanceRecord[]>([
    {
      id: '1',
      studentId: 'CSE001',
      rollNo: '20CS001',
      studentName: 'John Doe',
      examId: 'EX001',
      subject: 'Computer Networks',
      checkInTime: '08:45 AM',
      checkOutTime: '12:15 PM',
      status: 'present',
      seatNo: 'A1',
    },
    {
      id: '2',
      studentId: 'CSE002',
      rollNo: '20CS002',
      studentName: 'Jane Smith',
      examId: 'EX001',
      subject: 'Computer Networks',
      checkInTime: '08:50 AM',
      checkOutTime: '12:10 PM',
      status: 'present',
      seatNo: 'A2',
    },
    {
      id: '3',
      studentId: 'CSE003',
      rollNo: '20CS003',
      studentName: 'Bob Wilson',
      examId: 'EX001',
      subject: 'Computer Networks',
      checkInTime: '-',
      checkOutTime: '-',
      status: 'absent',
      seatNo: 'A3',
    },
  ]);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingRecord, setEditingRecord] = useState<AttendanceRecord | null>(null);
  const [isExporting, setIsExporting] = useState(false);

  const filteredAttendance = attendanceData.filter((record) => {
    const matchesSearch =
      record.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.rollNo.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = attendanceFilter === 'all' || record.status === attendanceFilter;
    return matchesSearch && matchesFilter;
  });

  const attendanceStats = {
    total: attendanceData.length,
    present: attendanceData.filter((r) => r.status === 'present').length,
    absent: attendanceData.filter((r) => r.status === 'absent').length,
    late: attendanceData.filter((r) => r.status === 'late').length,
  };

  // Export Report Function
  const exportReport = async () => {
    setIsExporting(true);
    
    try {
      // Get current date and time
      const now = new Date();
      const currentDate = now.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      const currentTime = now.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit'
      });

      // Get selected exam name
      const examNames = {
        'EX001': 'Computer Networks - Mid Sem',
        'EX002': 'Database Management - Final',
        'EX003': 'Operating Systems - Mid Sem'
      };
      const examName = examNames[selectedExam as keyof typeof examNames] || 'Unknown Exam';

      // Create CSV content with header information
      let csvContent = '';
      csvContent += `Student Attendance Report\n`;
      csvContent += `Exam: ${examName}\n`;
      csvContent += `Generated on: ${currentDate} at ${currentTime}\n`;
      csvContent += `Generated by: Dr. Richard Anderson\n`;
      csvContent += `\n`;
      csvContent += `Summary Statistics:\n`;
      csvContent += `Total Students: ${attendanceStats.total}\n`;
      csvContent += `Present: ${attendanceStats.present}\n`;
      csvContent += `Absent: ${attendanceStats.absent}\n`;
      csvContent += `Late: ${attendanceStats.late}\n`;
      csvContent += `Attendance Rate: ${Math.round((attendanceStats.present / attendanceStats.total) * 100)}%\n`;
      csvContent += `\n`;
      csvContent += `Detailed Attendance Records:\n`;

      // Add table headers
      const headers = ['Roll No', 'Student Name', 'Seat No', 'Check In', 'Check Out', 'Status'];
      csvContent += headers.join(',') + '\n';

      // Add data rows
      filteredAttendance.forEach(record => {
        const row = [
          record.rollNo,
          `"${record.studentName}"`, // Wrap in quotes to handle names with commas
          record.seatNo,
          record.checkInTime,
          record.checkOutTime,
          record.status.charAt(0).toUpperCase() + record.status.slice(1)
        ];
        csvContent += row.join(',') + '\n';
      });

      // Create and download file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      
      // Create filename with timestamp
      const timestamp = now.toISOString().split('T')[0]; // YYYY-MM-DD format
      const examCode = selectedExam.toLowerCase();
      const filename = `attendance_report_${examCode}_${timestamp}.csv`;
      
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up
      URL.revokeObjectURL(url);
      
      // Show success message (you can replace this with a toast notification)
      alert(`Attendance report exported successfully as ${filename}`);
      
    } catch (error) {
      console.error('Error exporting report:', error);
      alert('Failed to export report. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const handleUpdateClick = (record: AttendanceRecord) => {
    setEditingRecord(record);
    setIsModalOpen(true);
  };

  const handleSave = () => {
    if (!editingRecord) return;
    setAttendanceData((prev) =>
      prev.map((r) => (r.id === editingRecord.id ? editingRecord : r))
    );
    setIsModalOpen(false);
    setEditingRecord(null);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <button 
          onClick={exportReport}
          disabled={isExporting || filteredAttendance.length === 0}
          className="bg-green-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <Download className={`h-4 w-4 ${isExporting ? 'animate-spin' : ''}`} />
          <span>{isExporting ? 'Exporting...' : 'Export Report'}</span>
        </button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
              <Users className="h-5 w-5 text-blue-600" />
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{attendanceStats.total}</p>
              <p className="text-sm text-gray-600">Total Students</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
              <UserCheck className="h-5 w-5 text-green-600" />
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{attendanceStats.present}</p>
              <p className="text-sm text-gray-600">Present</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
              <UserX className="h-5 w-5 text-red-600" />
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{attendanceStats.absent}</p>
              <p className="text-sm text-gray-600">Absent</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
              <Clock className="h-5 w-5 text-yellow-600" />
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">
                {attendanceStats.total > 0 
                  ? Math.round((attendanceStats.present / attendanceStats.total) * 100)
                  : 0}%
              </p>
              <p className="text-sm text-gray-600">Attendance Rate</p>
            </div>
          </div>
        </div>
      </div>

      {/* Filters + Table */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <input
                type="text"
                placeholder="Search students..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <select
              value={selectedExam}
              onChange={(e) => setSelectedExam(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="EX001">Computer Networks - Mid Sem</option>
              <option value="EX002">Database Management - Final</option>
              <option value="EX003">Operating Systems - Mid Sem</option>
            </select>

            <select
              value={attendanceFilter}
              onChange={(e) => setAttendanceFilter(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Status</option>
              <option value="present">Present</option>
              <option value="absent">Absent</option>
              <option value="late">Late</option>
            </select>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Roll No</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Student Name</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Seat No</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Check In</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Check Out</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Status</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredAttendance.length === 0 ? (
                <tr>
                  <td colSpan={7} className="py-8 px-4 text-center text-gray-500">
                    No attendance records found
                  </td>
                </tr>
              ) : (
                filteredAttendance.map((record) => (
                  <tr key={record.id} className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="py-3 px-4 text-sm font-medium text-gray-900">{record.rollNo}</td>
                    <td className="py-3 px-4 text-sm text-gray-600">{record.studentName}</td>
                    <td className="py-3 px-4 text-sm text-gray-600">{record.seatNo}</td>
                    <td className="py-3 px-4 text-sm text-gray-600">{record.checkInTime}</td>
                    <td className="py-3 px-4 text-sm text-gray-600">{record.checkOutTime}</td>
                    <td className="py-3 px-4">
                      <span
                        className={`inline-flex px-2 py-1 text-xs rounded-full font-medium ${
                          record.status === 'present'
                            ? 'bg-green-100 text-green-800'
                            : record.status === 'absent'
                            ? 'bg-red-100 text-red-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}
                      >
                        {record.status.charAt(0).toUpperCase() + record.status.slice(1)}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <button
                        onClick={() => handleUpdateClick(record)}
                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                      >
                        Update
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Update Modal */}
      {isModalOpen && editingRecord && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
            <h2 className="text-lg font-bold mb-4">Update Attendance</h2>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Student</label>
                <input
                  type="text"
                  value={`${editingRecord.rollNo} - ${editingRecord.studentName}`}
                  readOnly
                  className="mt-1 w-full border rounded-lg px-3 py-2 bg-gray-100"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Status</label>
                <select
                  value={editingRecord.status}
                  onChange={(e) =>
                    setEditingRecord({ ...editingRecord, status: e.target.value as AttendanceRecord['status'] })
                  }
                  className="mt-1 w-full border rounded-lg px-3 py-2"
                >
                  <option value="present">Present</option>
                  <option value="absent">Absent</option>
                  <option value="late">Late</option>
                </select>
              </div>

              <div className="flex space-x-2">
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700">Check In</label>
                  <input
                    type="text"
                    value={editingRecord.checkInTime}
                    onChange={(e) =>
                      setEditingRecord({ ...editingRecord, checkInTime: e.target.value })
                    }
                    placeholder="e.g., 08:45 AM"
                    className="mt-1 w-full border rounded-lg px-3 py-2"
                  />
                </div>
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700">Check Out</label>
                  <input
                    type="text"
                    value={editingRecord.checkOutTime}
                    onChange={(e) =>
                      setEditingRecord({ ...editingRecord, checkOutTime: e.target.value })
                    }
                    placeholder="e.g., 12:15 PM"
                    className="mt-1 w-full border rounded-lg px-3 py-2"
                  />
                </div>
              </div>
            </div>

            <div className="mt-6 flex justify-end space-x-3">
              <button
                onClick={() => {
                  setIsModalOpen(false);
                  setEditingRecord(null);
                }}
                className="px-4 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-100 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                className="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors"
              >
                Save Changes
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Export Success/Error Toast (Optional) */}
      {/* You can add a toast notification library like react-hot-toast for better UX */}
    </div>
  );
};

export default StudentAttendance;
